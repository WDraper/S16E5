DROP SEQUENCE P_Department_seq ; 
create sequence P_Department_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger P_Department_PK_trig 
before insert on P_Department
for each row 
begin 
select P_Department_seq.nextval into :new.dept_id from dual; 
end; 
/
alter table P_Department add created date ; 
alter table P_Department add created_by VARCHAR2 (255) ; 
alter table P_Department add row_version_number integer ; 
alter table P_Department add updated date ; 
alter table P_Department add updated_by VARCHAR2 (255) ; 
/
create or replace trigger P_Department_AUD_trig 
before insert or update on P_Department 
for each row 
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1; 
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

DROP SEQUENCE P_Manager_Employee_seq ; 
create sequence P_Manager_Employee_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger P_Manager_Employee_PK_trig 
before insert on P_Manager_Employee
for each row 
begin 
select P_Manager_Employee_seq.nextval into :new.manager_employee_id from dual; 
end; 
/
alter table P_Manager_Employee add created date ; 
alter table P_Manager_Employee add created_by VARCHAR2 (255) ; 
alter table P_Manager_Employee add row_version_number integer ; 
alter table P_Manager_Employee add updated date ; 
alter table P_Manager_Employee add updated_by VARCHAR2 (255) ; 
/
create or replace trigger P_Manager_Employee_AUD_trig 
before insert or update on P_Manager_Employee 
for each row 
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1; 
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

DROP SEQUENCE P_Parent_Child_seq ; 
create sequence P_Parent_Child_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger P_Parent_Child_PK_trig 
before insert on P_Parent_Child
for each row 
begin 
select P_Parent_Child_seq.nextval into :new.parent_child_id from dual; 
end; 
/
alter table P_Parent_Child add created date ; 
alter table P_Parent_Child add created_by VARCHAR2 (255) ; 
alter table P_Parent_Child add row_version_number integer ; 
alter table P_Parent_Child add updated date ; 
alter table P_Parent_Child add updated_by VARCHAR2 (255) ; 
/
create or replace trigger P_Parent_Child_AUD_trig 
before insert or update on P_Parent_Child 
for each row 
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1; 
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

DROP SEQUENCE P_Person_seq ; 
create sequence P_Person_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger P_Person_PK_trig 
before insert on P_Person
for each row 
begin 
select P_Person_seq.nextval into :new.person_id from dual; 
end; 
/
alter table P_Person add created date ; 
alter table P_Person add created_by VARCHAR2 (255) ; 
alter table P_Person add row_version_number integer ; 
alter table P_Person add updated date ; 
alter table P_Person add updated_by VARCHAR2 (255) ; 
/
create or replace trigger P_Person_AUD_trig 
before insert or update on P_Person 
for each row 
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1; 
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

DROP SEQUENCE P_Project_seq ; 
create sequence P_Project_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger P_Project_PK_trig 
before insert on P_Project
for each row 
begin 
select P_Project_seq.nextval into :new.project_id from dual; 
end; 
/
alter table P_Project add created date ; 
alter table P_Project add created_by VARCHAR2 (255) ; 
alter table P_Project add row_version_number integer ; 
alter table P_Project add updated date ; 
alter table P_Project add updated_by VARCHAR2 (255) ; 
/
create or replace trigger P_Project_AUD_trig 
before insert or update on P_Project 
for each row 
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1; 
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

DROP SEQUENCE P_Projects_seq ; 
create sequence P_Projects_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger P_Projects_PK_trig 
before insert on P_Projects
for each row 
begin 
select P_Projects_seq.nextval into :new.projects_id from dual; 
end; 
/
alter table P_Projects add created date ; 
alter table P_Projects add created_by VARCHAR2 (255) ; 
alter table P_Projects add row_version_number integer ; 
alter table P_Projects add updated date ; 
alter table P_Projects add updated_by VARCHAR2 (255) ; 
/
create or replace trigger P_Projects_AUD_trig 
before insert or update on P_Projects 
for each row 
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1; 
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

DROP SEQUENCE P_Sub_Projects_seq ; 
create sequence P_Sub_Projects_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger P_Sub_Projects_PK_trig 
before insert on P_Sub_Projects
for each row 
begin 
select P_Sub_Projects_seq.nextval into :new.sub_project_id from dual; 
end; 
/
alter table P_Sub_Projects add created date ; 
alter table P_Sub_Projects add created_by VARCHAR2 (255) ; 
alter table P_Sub_Projects add row_version_number integer ; 
alter table P_Sub_Projects add updated date ; 
alter table P_Sub_Projects add updated_by VARCHAR2 (255) ; 
/
create or replace trigger P_Sub_Projects_AUD_trig 
before insert or update on P_Sub_Projects 
for each row 
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1; 
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

DROP INDEX dept_id_FK_0 ;
CREATE INDEX dept_id_FK_0 ON P_Person(dept_id) ;
DROP INDEX dept_id_FK_1 ;
CREATE INDEX dept_id_FK_1 ON P_Project(dept_id) ;
DROP INDEX manager_id_FK_2 ;
CREATE INDEX manager_id_FK_2 ON P_Project(manager_id) ;
DROP INDEX person_id_FK_3 ;
CREATE INDEX person_id_FK_3 ON P_Projects(person_id) ;
DROP INDEX project_id_FK_4 ;
CREATE INDEX project_id_FK_4 ON P_Projects(project_id) ;
DROP INDEX parent_id_FK_5 ;
CREATE INDEX parent_id_FK_5 ON P_Parent_Child(parent_id) ;
DROP INDEX child_id_FK_6 ;
CREATE INDEX child_id_FK_6 ON P_Parent_Child(child_id) ;
DROP INDEX manager_id_FK_7 ;
CREATE INDEX manager_id_FK_7 ON P_Manager_Employee(manager_id) ;
DROP INDEX employee_id_FK_8 ;
CREATE INDEX employee_id_FK_8 ON P_Manager_Employee(employee_id) ;
DROP INDEX master_project_FK_9 ;
CREATE INDEX master_project_FK_9 ON P_Sub_Projects(master_project) ;
DROP INDEX sub_project_FK_10 ;
CREATE INDEX sub_project_FK_10 ON P_Sub_Projects(sub_project) ;
