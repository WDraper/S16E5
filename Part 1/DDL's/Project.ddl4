drop view P_Create_Spouse_view;
drop view P_Create_Children_view;
drop view P_Person_view;
drop view P_Employee_view ;
drop view P_Previous_Employee_view ;
drop view P_Manager_view ;
drop view P_President_view ;
drop view P_Interim_Manager_view ;
drop view P_Current_Project_view ;
drop view P_Previous_Project_view ;

drop view P_Project_view;
drop view P_Department_view;

create view P_Department_view as
SELECT
    dept_id,
    dept_name
FROM P_Department;
create or replace TRIGGER P_Department_trigger
     INSTEAD OF insert ON P_Department_view
     FOR EACH ROW
BEGIN
    insert into P_Department(
        dept_id,
        dept_name)
    VALUES (
        :NEW.dept_id,
        :NEW.dept_name);
END;
/

create view P_Person_view as
SELECT 
    person_id,
    person_type,
    first_name,
    last_name,
    street_address,
    city,
    state,
    zipcode,
    phone,
    salary,
    bonus,
    us_citizen,
    salary_exception,
    fired,
    quit,
    dept_id,
    spouse_id
FROM P_Person;

create or replace TRIGGER P_Person_trigger
     INSTEAD OF insert ON P_Person_view
     FOR EACH ROW
BEGIN
    insert into P_Person(
        person_id,
        person_type,
        first_name,
        last_name,
        street_address,
        city,
        state,
        zipcode,
        phone,
        salary,
        bonus,
        us_citizen,
        salary_exception,
        fired,
        quit,
        dept_id,
        spouse_id)
    VALUES ( 
        :NEW.person_id,
        :NEW.person_type,
        :NEW.first_name,
        :NEW.last_name,
        :NEW.street_address,
        :NEW.city,
        :NEW.state,
        :NEW.zipcode,
        :NEW.phone,
        :NEW.salary,
        :NEW.bonus,
        :NEW.us_citizen,
        :NEW.salary_exception,
        :NEW.fired,
        :NEW.quit,
        :NEW.dept_id,
        :NEW.spouse_id) ;
END;
/

create view P_Create_Spouse_view as
SELECT 
    person_id,
    person_type,
    first_name,
    last_name,
    street_address,
    city,
    state,
    zipcode,
    phone,
    salary,
    bonus,
    us_citizen,
    salary_exception,
    fired,
    quit,
    dept_id,
    spouse_id
FROM P_Person where person_type = 'Person' ;

create or replace TRIGGER P_Create_Spouse_trigger
     INSTEAD OF insert ON P_Create_Spouse_view
     FOR EACH ROW
BEGIN
    insert into P_Person(
        person_id,
        person_type,
        first_name,
        last_name,
        street_address,
        city,
        state,
        zipcode,
        phone,
        salary,
        bonus,
        us_citizen,
        salary_exception,
        fired,
        quit,
        dept_id,
        spouse_id)
    VALUES ( 
        :NEW.person_id,
        :NEW.person_type,
        :NEW.first_name,
        :NEW.last_name,
        :NEW.street_address,
        :NEW.city,
        :NEW.state,
        :NEW.zipcode,
        :NEW.phone,
        :NEW.salary,
        :NEW.bonus,
        :NEW.us_citizen,
        :NEW.salary_exception,
        :NEW.fired,
        :NEW.quit,
        :NEW.dept_id,
        :NEW.spouse_id) ;
END;
/

create view P_Create_Children_view as
SELECT 
    person_id,
    person_type,
    first_name,
    last_name,
    street_address,
    city,
    state,
    zipcode,
    phone,
    salary,
    bonus,
    us_citizen,
    salary_exception,
    fired,
    quit,
    dept_id,
    spouse_id
FROM P_Person where person_type = 'Person' ;

create or replace TRIGGER P_Create_Children_trigger
     INSTEAD OF insert ON P_Create_Children_view
     FOR EACH ROW
BEGIN
    insert into P_Person(
        person_id,
        person_type,
        first_name,
        last_name,
        street_address,
        city,
        state,
        zipcode,
        phone,
        salary,
        bonus,
        us_citizen,
        salary_exception,
        fired,
        quit,
        dept_id,
        spouse_id)
    VALUES ( 
        :NEW.person_id,
        :NEW.person_type,
        :NEW.first_name,
        :NEW.last_name,
        :NEW.street_address,
        :NEW.city,
        :NEW.state,
        :NEW.zipcode,
        :NEW.phone,
        :NEW.salary,
        :NEW.bonus,
        :NEW.us_citizen,
        :NEW.salary_exception,
        :NEW.fired,
        :NEW.quit,
        :NEW.dept_id,
        :NEW.spouse_id) ;
END;
/

create view P_Employee_view as
SELECT 
    person_id,
    person_type,
    first_name,
    last_name,
    street_address,
    city,
    state,
    zipcode,
    phone,
    salary,
    bonus,
    us_citizen,
    salary_exception,
    fired,
    quit,
    dept_id,
    spouse_id
FROM P_Person where person_type = 'Employee' ;

create or replace TRIGGER P_Employee_trigger
     INSTEAD OF insert ON P_Employee_view
     FOR EACH ROW
BEGIN
    insert into P_Person(
        person_id,
        person_type,
        first_name,
        last_name,
        street_address,
        city,
        state,
        zipcode,
        phone,
        salary,
        bonus,
        us_citizen,
        salary_exception,
        fired,
        quit,
        dept_id,
        spouse_id)
    VALUES ( 
        :NEW.person_id,
        'Employee',
        :NEW.first_name,
        :NEW.last_name,
        :NEW.street_address,
        :NEW.city,
        :NEW.state,
        :NEW.zipcode,
        :NEW.phone,
        :NEW.salary,
        :NEW.bonus,
        :NEW.us_citizen,
        :NEW.salary_exception,
        :NEW.fired,
        :NEW.quit,
        :NEW.dept_id,
        :NEW.spouse_id) ;
END;
/

create view P_Previous_Employee_view as
SELECT 
    person_id,
    person_type,
    first_name,
    last_name,
    street_address,
    city,
    state,
    zipcode,
    phone,
    salary,
    bonus,
    us_citizen,
    salary_exception,
    fired,
    quit,
    dept_id,
    spouse_id
FROM P_Person where person_type = 'Previous_Employee' ;

create or replace TRIGGER P_Previous_Employee_trigger
     INSTEAD OF insert ON P_Previous_Employee_view
     FOR EACH ROW
BEGIN
    insert into P_Person(
        person_id,
        person_type,
        first_name,
        last_name,
        street_address,
        city,
        state,
        zipcode,
        phone,
        salary,
        bonus,
        us_citizen,
        salary_exception,
        fired,
        quit,
        dept_id,
        spouse_id)
    VALUES ( 
        :NEW.person_id,
        'Previous_Employee',
        :NEW.first_name,
        :NEW.last_name,
        :NEW.street_address,
        :NEW.city,
        :NEW.state,
        :NEW.zipcode,
        :NEW.phone,
        :NEW.salary,
        :NEW.bonus,
        :NEW.us_citizen,
        :NEW.salary_exception,
        :NEW.fired,
        :NEW.quit,
        :NEW.dept_id,
        :NEW.spouse_id) ;
END;
/

create view P_Manager_view as
SELECT 
    person_id,
    person_type,
    first_name,
    last_name,
    street_address,
    city,
    state,
    zipcode,
    phone,
    salary,
    bonus,
    us_citizen,
    salary_exception,
    fired,
    quit,
    dept_id,
    spouse_id
FROM P_Person where person_type = 'Manager' ;

create or replace TRIGGER P_Manager_trigger
     INSTEAD OF insert ON P_Manager_view
     FOR EACH ROW
BEGIN
    insert into P_Person(
        person_id,
        person_type,
        first_name,
        last_name,
        street_address,
        city,
        state,
        zipcode,
        phone,
        salary,
        bonus,
        us_citizen,
        salary_exception,
        fired,
        quit,
        dept_id,
        spouse_id)
    VALUES ( 
        :NEW.person_id,
        'Manager',
        :NEW.first_name,
        :NEW.last_name,
        :NEW.street_address,
        :NEW.city,
        :NEW.state,
        :NEW.zipcode,
        :NEW.phone,
        :NEW.salary,
        :NEW.bonus,
        :NEW.us_citizen,
        :NEW.salary_exception,
        :NEW.fired,
        :NEW.quit,
        :NEW.dept_id,
        :NEW.spouse_id) ;
END;
/

create view P_President_view as
SELECT 
    person_id,
    person_type,
    first_name,
    last_name,
    street_address,
    city,
    state,
    zipcode,
    phone,
    salary,
    bonus,
    us_citizen,
    salary_exception,
    fired,
    quit,
    dept_id,
    spouse_id
FROM P_Person where person_type = 'President' ;

create or replace TRIGGER P_President_trigger
     INSTEAD OF insert ON P_President_view
     FOR EACH ROW
BEGIN
    insert into P_Person(
        person_id,
        person_type,
        first_name,
        last_name,
        street_address,
        city,
        state,
        zipcode,
        phone,
        salary,
        bonus,
        us_citizen,
        salary_exception,
        fired,
        quit,
        dept_id,
        spouse_id)
    VALUES ( 
        :NEW.person_id,
        'President',
        :NEW.first_name,
        :NEW.last_name,
        :NEW.street_address,
        :NEW.city,
        :NEW.state,
        :NEW.zipcode,
        :NEW.phone,
        :NEW.salary,
        :NEW.bonus,
        :NEW.us_citizen,
        :NEW.salary_exception,
        :NEW.fired,
        :NEW.quit,
        :NEW.dept_id,
        :NEW.spouse_id) ;
END;
/

create view P_Interim_Manager_view as
SELECT 
    person_id,
    person_type,
    first_name,
    last_name,
    street_address,
    city,
    state,
    zipcode,
    phone,
    salary,
    bonus,
    us_citizen,
    salary_exception,
    fired,
    quit,
    dept_id,
    spouse_id
FROM P_Person where person_type = 'Interim_Manager' ;

create or replace TRIGGER P_Interim_Manager_trigger
     INSTEAD OF insert ON P_Interim_Manager_view
     FOR EACH ROW
BEGIN
    insert into P_Person(
        person_id,
        person_type,
        first_name,
        last_name,
        street_address,
        city,
        state,
        zipcode,
        phone,
        salary,
        bonus,
        us_citizen,
        salary_exception,
        fired,
        quit,
        dept_id,
        spouse_id)
    VALUES ( 
        :NEW.person_id,
        'Interim_Manager',
        :NEW.first_name,
        :NEW.last_name,
        :NEW.street_address,
        :NEW.city,
        :NEW.state,
        :NEW.zipcode,
        :NEW.phone,
        :NEW.salary,
        :NEW.bonus,
        :NEW.us_citizen,
        :NEW.salary_exception,
        :NEW.fired,
        :NEW.quit,
        :NEW.dept_id,
        :NEW.spouse_id) ;
END;
/

create view P_Current_Project_view as
SELECT 
    project_id,
    project_title,
    project_active,
    end_date,
    est_person_hours,
    manager_id,
    dept_id,
    mp_id
FROM P_Project where project_type = 'Current_Project' ;

create or replace TRIGGER P_Current_Project_trigger
     INSTEAD OF insert ON P_Current_Project_view
     FOR EACH ROW
BEGIN
    insert into P_Project(
        project_id,
        project_title,
        project_type,
        project_active,
        end_date,
        est_person_hours,
        manager_id,
        dept_id,
        mp_id)
    VALUES ( 
        :NEW.project_id,
        :NEW.project_title,
        'Current_Project',
        :NEW.project_active,
        :NEW.end_date,
        :NEW.est_person_hours,
        :NEW.manager_id,
        :NEW.dept_id,
        :NEW.mp_id) ;
END;
/

create view P_Previous_Project_view as
SELECT 
    project_id,
    project_title,
    project_active,
    end_date,
    est_person_hours,
    manager_id,
    dept_id,
    mp_id
FROM P_Project where project_type = 'Previous_Project' ;

create or replace TRIGGER P_Previous_Project_trigger
     INSTEAD OF insert ON P_Previous_Project_view
     FOR EACH ROW
BEGIN
    insert into P_Project(
        project_id,
        project_title,
        project_type,
        project_active,
        end_date,
        est_person_hours,
        manager_id,
        dept_id,
        mp_id)
    VALUES ( 
        :NEW.project_id,
        :NEW.project_title,
        'Previous_Project',
        :NEW.project_active,
        :NEW.end_date,
        :NEW.est_person_hours,
        :NEW.manager_id,
        :NEW.dept_id,
        :NEW.mp_id) ;
END;
/

create view P_Project_view as
SELECT 
    project_id,
    project_title,
    project_type,
    project_active,
    end_date,
    est_person_hours,
    manager_id,
    dept_id,
    mp_id
FROM P_Project;

create or replace TRIGGER P_Project_trigger
     INSTEAD OF insert ON P_Project_view
     FOR EACH ROW
BEGIN
    insert into P_Project(
        project_id,
        project_title,
        project_type,
        project_active,
        end_date,
        est_person_hours,
        manager_id,
        dept_id,
        mp_id)
    VALUES ( 
        :NEW.project_id,
        :NEW.project_title,
        :NEW.project_type,
        :NEW.project_active,
        :NEW.end_date,
        :NEW.est_person_hours,
        :NEW.manager_id,
        :NEW.dept_id,
        :NEW.mp_id) ;
END;
/



